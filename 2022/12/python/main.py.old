from queue import PriorityQueue
import time
from copy import deepcopy
from dataclasses import dataclass, field
from typing import Any

@dataclass(order=True)
class PrioItem:
    priority: int
    item: Any=field(compare=False)

def explore_map(map, height, width, goal, start):
    q = PriorityQueue()
    q.put(PrioItem(0,(start[0],start[1],0)))
    while not q.empty():
        item = q.get()
        x, y, steps = item.item 
        if x == goal[0] and y == goal[1]:
            return steps
        for x1, y1 in [(1,0), (0,1), (-1,0), (0, -1)]:
            x2 = x1 + x
            y2 = y1 + y
            if x2 > -1 and x2 < width and y2 > -1 and y2 < height and map[y2][x2] - map[y][x]  < 2: 
                item = PrioItem(item.priority+1+abs(x2-goal[0])+abs(y2-goal[1]), (x2, y2, steps+1))
                q.put(item) 
                

with open('../input/input') as data:
    map = [[ord(char) for char in line.strip()] for line in data]
    goal = None
    for y in range(len(map)):
        for x in range(len(map[y])):
    #        print(map[y][x],  end=' ')
            if map[y][x] == ord('E'):
                goal = (x,y)
                map[y][x] = ord('z')
            if map[y][x] == ord('S'):
                start = (x,y)
                map[y][x] = 200 
    #    print()
    print(explore_map(map, len(map), len(map[0]), goal, start))

